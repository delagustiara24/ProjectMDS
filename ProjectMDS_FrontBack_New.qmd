---
title: "Project MDS - UTS"
author: "Dela Gustiara - M0501240124"
title: "Front End-Back End"
format: html
---

```{r}
library(DBI)
library(RMySQL)
library(glue)
library(dplyr)
```

```{r}
# Konfigurasi database
db_config <- list(
  host = "127.0.0.1",
  port = 3306,          # Port MySQL di DBngin
  user = "root",
  password = "",
  dbname = "database_os"    # Nama database yang akan dibuat
)
```

```{r}
# Koneksi ke MySQL
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password
)

dbExecute(con, glue("CREATE DATABASE IF NOT EXISTS {db_config$dbname}"))
message("Database ", db_config$dbname, " berhasil dibuat/ditemukan")

dbDisconnect(con)
```

```{r}
# Koneksi ke database yang dibuat
con_db <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)
```


```{r}
# Definisi tabel dengan tipe data yang benar
table_definitions <- list(
  data_customer = "
    CREATE TABLE IF NOT EXISTS data_customer (
      CustomerID INT PRIMARY KEY,
      Gender VARCHAR(10),
      Locations VARCHAR(50),
      Age INT
    )
  ",
  
  data_voucher = "
    CREATE TABLE IF NOT EXISTS data_voucher (
      VoucherID VARCHAR(10) PRIMARY KEY,
      Voucher_name VARCHAR(100),
      Discount DECIMAL(5,2)
    )
  ",

  data_payment_method = "
    CREATE TABLE IF NOT EXISTS data_payment_method (
      PMID VARCHAR(10) PRIMARY KEY,
      Method_name VARCHAR(50)
    )
  ",
  
  data_product = "
    CREATE TABLE IF NOT EXISTS data_product (
      ProductID VARCHAR(20) PRIMARY KEY,
      Product_name VARCHAR(100),
      Product_Description TEXT,
      Product_Category VARCHAR(50),
      Stock INT,
      Price DECIMAL(10,2)
    )
  ",
  
  data_transaction = "
    CREATE TABLE IF NOT EXISTS data_transaction (
      TransactionID INT PRIMARY KEY,
      Transaction_Date DATE,
      Price DECIMAL(10,2),
      Total_Price DECIMAL(10,2),
      Discount_Price DECIMAL(10,2),
      Quantity INT,
      CustomerID INT,
      ProductID VARCHAR(20),
      PMID VARCHAR(10),
      VoucherID VARCHAR(10) NULL,
      Voucher_status VARCHAR(20),
      Discount DECIMAL(5,2),
      FOREIGN KEY (CustomerID) REFERENCES data_customer(CustomerID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (ProductID) REFERENCES data_product(ProductID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (VoucherID) REFERENCES data_voucher(VoucherID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (PMID) REFERENCES data_payment_method(PMID) ON DELETE CASCADE ON UPDATE CASCADE
    )
  "
)
```

```{r}
# Membuat tabel
dbBegin(con_db)
for (table_name in names(table_definitions)) {
  dbExecute(con_db, table_definitions[[table_name]])
  message("Tabel ", table_name, " berhasil dibuat")
}
dbCommit(con_db)
```

```{r}
dbExecute(con_db, "SET GLOBAL local_infile = 1;")
dbGetQuery(con_db, "SHOW VARIABLES LIKE 'local_infile';")
```

```{r}
# Load data dari file CSV
data_customer <- read.csv("Dataset_4/data_customer.csv")
data_product <- read.csv("Dataset_4/data_product.csv")
data_transaction <- read.csv("Dataset_4/data_transaction.csv")
data_voucher <- read.csv("Dataset_4/data_voucher.csv")


# Menonaktifkan notasi ilmiah di seluruh sesi R
options(scipen = 999)

# Tentukan kurs USD ke IDR
exchange_rate <- 15000

# Perubahan data_product
# Pastikan Price tetap numerik sebelum dikonversi
data_product <- data_product %>%
  mutate(
    Price = as.numeric(Price) * exchange_rate,  # Pastikan Price tetap numerik
    Stock = as.integer(Stock)  # Pastikan Stock dalam format integer biasa
  )

# Perubahan data_transaction
data_transaction <- data_transaction %>%
  mutate(Transaction_Date = as.Date(Transaction_Date, format = "%d.%m.%y")) %>%
  left_join(data_voucher, by = "VoucherID") %>%
  mutate(Discount = ifelse(Voucher_status == "Used", Discount, 0)) %>%
  mutate(Total_Price = as.numeric(Total_Price) * exchange_rate) %>%
  left_join(data_product %>% select(ProductID, Price), by = "ProductID") %>%
  mutate(
    Discount = Discount / 100,
    Discount_Price = Price * Discount,
    Price = as.numeric(Price),
    Total_Price = as.numeric(Total_Price)
  ) %>%
  select(TransactionID, Transaction_Date, Price, Total_Price, Discount_Price, 
         Quantity, CustomerID, ProductID, PMID, VoucherID, 
         Voucher_status, Discount) %>%
  mutate(Discount = ifelse(Discount == 0, "", paste0(Discount * 100, "%")))

# Membuat dataset baru 'data_payment_method'
data_payment_method <- data_transaction %>%
  select(PMID) %>%
  distinct() %>%
  mutate(Method_name = case_when(
    PMID == "PM01" ~ "Card",
    PMID == "PM02" ~ "Paypal",
    PMID == "PM03" ~ "Digital Wallets",
    PMID == "PM04" ~ "Other"
  ))

# Menampilkan hasil
View(data_customer)
View(data_product)
View(data_transaction)
View(data_voucher)
View(data_payment_method)
```

```{r}
# Menyimpan data ke database
dbWriteTable(con_db, "data_customer", data_customer, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_product", data_product, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_voucher", data_voucher, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_transaction", data_transaction, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_payment_method", data_payment_method, append = TRUE, row.names = FALSE)


message("Data berhasil dimasukkan ke database!")
```

```{r}
dbWriteTable(con_db, "data_transaction", data_transaction, append = TRUE, row.names = FALSE)
```

```{r}
# Verifikasi tabel yang dibuat
tryCatch({
  existing_tables <- dbGetQuery(con_db, "SHOW TABLES")
  message("\nTabel yang tersedia di database ", db_config$dbname, ":")
  print(existing_tables)
}, error = function(e) {
  dbRollback(con_db)
  message("Error membuat tabel: ", e$message)
})
```

```{r}
dbDisconnect(con_db)
message("\nKoneksi database ditutup")
```

## DELA GUSTIARA-Front END

```{r}
library(DBI)
library(RMySQL)
library(glue)

# Konfigurasi database
db_config <- list(
  host = "127.0.0.1",
  port = 3306,          # Sesuaikan dengan port MySQL kamu
  user = "root",
  password = "",
  dbname = "database_os"    # Nama database yang ingin dipakai
)

# Koneksi awal ke server MySQL (tanpa database)
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password
)

# Cek apakah database sudah ada
db_list <- dbGetQuery(con, "SHOW DATABASES")
db_exists <- db_config$dbname %in% db_list$Database

if (db_exists) {
  message("Database '", db_config$dbname, "' sudah ada.")
} else {
  dbExecute(con, glue("CREATE DATABASE `{db_config$dbname}`"))
  message("Database '", db_config$dbname, "' berhasil dibuat.")
}

# Tutup koneksi awal
dbDisconnect(con)

# Koneksi ulang langsung ke database yang ditentukan
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)

message("Terhubung ke database '", db_config$dbname, "'.")

# Nanti setelah selesai kerja
# dbDisconnect(con)

```

```{r}
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(ggplot2)
library(dplyr)
library(readr)
library(lubridate)
```

### Data Produk

```{r}
# Data Produk
product_data <- data.frame(
  ProductID = c("GGOEAAAJ032415", "GGOEAAAJ032425", "GGOEAAAJ032435", "GGOEAAAJ032445", "GGOEAAAJ032455",
                "GGOEWEBB082199", "GGOEWEBB082299", "GGOEYDHJ056049", "GGOEYDHJ056059", "GGOEAFKQ020599",
                "GGOEAFKQ020499", "GGOEAFKQ020399", "GGOEAFKQ020299", "GGOEAFKQ020199", "GGOEYDHJ056029",
                "GGOEYDHJ056039", "GGOEWEBB082399", "GGOEWEBB082499", "GGOEWEBB082599", "GGOEYDHJ056019"),
  Product_name = c("ANRABESS Women's Summer 2 Piece Outfits", "Dokotoo Tops for Women Trendy Summer Casual",
"rendy Queen Womens Oversized Sweatshirts Turtleneck", "Men's Crewneck Sweatshirts Soild Color",
                   "yageyan Men Canvas Low top Shoes", "OLANLY Luxury Bathroom Rug Mat 24x16",
                   "Clorox Toilet Plunger with Hideaway Storage Caddy", "64HYDRO 32oz 1Liter Motivational Water Bottle",
                   "Ocean Bottle 17 oz", "Teal Office Supplies", "Amazon Basics Stapler with 1000 Staples",
                   "Mr. Pen File Folders 18 Pack", "Gel Pens 12 Pcs Smooth Writing Pens No Bleed & Smear",
                   "Mr. Pen- Sticky Notes 12 Pads", "64 oz Water Bottle", "Kids Water Bottle with Straw Lid 14oz",
                   "KOHLER 4636-RL-0 Cachet ReadyLatch Elongated Toilet Seat", "Rubbermaid Commercial 15 Inch Toilet Brush",
                   "Moen YB8099CH Mason Toilet Paper Roller", "bubba Flo Duo Refresh Insulated Water Bottle 24 oz (TEAL)"),
  Product_Description = c("ANRABESS Women's Summer 2 Piece Outfits Sleeveless Tank Crop Button Back Top Capri Wide Leg Pants Linen Set with Pockets",
                          "Dokotoo Tops for Women Trendy Summer Casual Cap Short Sleeve Basic Textured Solid Color Round Neck T Shirts Blouse",
                          "rendy Queen Womens Oversized Sweatshirts Turtleneck Pullover Long Sleeve Hoodies Tops Fall Outfits 2023 Clothes",
                          "Men's Crewneck Sweatshirts Soild Color Geometric Texture Long Sleeve Casual Pullover Shirt",
                          "yageyan Men Canvas Low top Shoes Classic Casual Sneakers Black and White Fashion Shoes",
                          "OLANLY Luxury Bathroom Rug Mat 24x16, Extra Soft and Absorbent Microfiber Bath Rugs, Non-Slip Plush Shaggy Bath Carpet, Machine Wash Dry, Bath Mats for Bathroom Floor, Tub and Shower, Grey",
                          "Clorox Toilet Plunger with Hideaway Storage Caddy, 6.5'' x 6.5'' x 19.5'', White/Gray",
                          "64HYDRO 32oz 1Liter Motivational Water Bottle with Time Marker, Ocean Turtle Beach Summer Vibe Lose My Mind Find My Soul - TTZ2001009Z",
                          "Ocean Bottle - Recycled Stainless Steel Drinks Reusable Water Bottle - Eco-Friendly & Reusable - Sky Blue - 17 oz",
                          "Teal Office Supplies, Teal Office Supplies and Accessories, Mint Green Stapler and Tape Dispenser Set for Women, Green Office Desk Accessories, Office Gift for Women, Office Lady, Coworkers",
                          "Amazon Basics Stapler with 1000 Staples, Office Stapler, 25 Sheet",
                          "Mr. Pen File Folders, 18 Pack, Morandi Colors, 1/3-Cut Tab, Letter Size, Durable Paper Folders, Office Supplies",
                          "Gel Pens, 12 Pcs Smooth Writing Pens No Bleed & Smear, Black Ink Cute Pens Fine Point (0.5mm), Retractable Aesthetic Journaling Pens School Office Supplies for Women & Men",
                          "Mr. Pen- Sticky Notes, 12 Pads, 3''x3'', Vintage Colors, Sticky Notes 3x3, Sticky Note, Sticky Pads, Sticky Notes Bulk, Stick Notes, Colored Sticky Notes, Sticky Note Pad, Colorful Sticky Notes",
                          "64 oz Water Bottle, 1/2 Gallon Water Bottle, Water Bottle Holder with Shoulder Strap, Time Motivational Water Bottle - Great for Camping, Gym and Outdoor Activities, Gift",
                          "Kids Water Bottle with Straw Lid 14oz, Vacuum Insulated 316 Stainless Steel Water Bottles for Kids for School, Leakproof Toddler Water Bottle, BPA Free and Keep Cold for 24 Hours",
                          "KOHLER 4636-RL-0 Cachet ReadyLatch Elongated Toilet Seat, Quiet-Close Lid and Seat, Countoured Seat, Grip-Tight Bumpers and Installation Hardware, White",
                          "Rubbermaid Commercial 15 Inch Toilet Brush, Toilet Bowl-Cleaner for Bathroom, Scrub Brush for Toilet",
                          "Moen YB8099CH Mason Toilet Paper Roller, Chrome",
                          "bubba Flo Duo Refresh Insulated Water Bottle, 24 oz, TEAL (TEAL)"),
  Product_Category = c("Apparel", "Apparel", "Apparel", "Apparel", "Apparel",
                       "Home Furniture", "Home Furniture", "Bottles", "Bottles", "Office",
                       "Office", "Office", "Office", "Office", "Bottles",
                       "Bottles", "Home Furniture", "Home Furniture", "Home Furniture", "Bottles"),
  Stock = rep(100000, 20),
  Price = c(554850, 299700, 584850, 374850, 374850, 148350, 239850, 299250, 825000, 254850,
            128100, 179850, 97350, 134850, 370350, 149850, 594000, 55350, 23850, 299850)
)
```

### UI-Dashboard Page

```{r}
# UI
ui <- dashboardPage(
  dashboardHeader(
    title = div(
      style = "text-align: center; 
               background: linear-gradient(90deg, #1E90FF, #6A5ACD); 
               -webkit-background-clip: text; 
               -webkit-text-fill-color: transparent; 
               font-size: 50px; 
               font-weight: bold; 
               font-family: 'Arial Black', sans-serif; 
               text-shadow: 2px 2px 4px rgba(0,0,0,0.3);",
      h1("Dekirume", style = "margin: 0;")
    )
  ),
  
  # Sidebar
  dashboardSidebar(
    sidebarMenu(
      menuItem("Home", tabName = "home", icon = icon("home")),
      menuItem("Products", icon = icon("boxes"),
               menuSubItem("Product Recommendation", tabName = "product_recommendation", icon = icon("thumbs-up")),
               menuSubItem("Product Category", tabName = "product_category", icon = icon("list")),
               menuSubItem("Gallery Produk", tabName = "gallery_produk", icon = icon("image"))
      ),
      menuItem("Transactions", tabName = "transactions", icon = icon("shopping-cart")),
      menuItem("Vouchers", tabName = "vouchers", icon = icon("ticket-alt")),
      menuItem("Payment Methods", tabName = "payment_methods", icon = icon("credit-card")),
      menuItem("Our Team", tabName = "our_team", icon = icon("users"))
    )
  ),

  # Body
  dashboardBody(
    tags$head(
      tags$style(HTML("
        /* Custom CSS for the dashboard */
        .skin-blue .main-header .logo {
          background-color: #FF4500;
          color: white;
          font-weight: bold;
        }
        .skin-blue .main-header .navbar {
          background-color: #FF4500;
        }
        .skin-blue .main-sidebar {
          background-color: #2C3E50;
        }
        .skin-blue .main-sidebar .sidebar-menu > li > a {
          color: white;
        }
        .skin-blue .main-sidebar .sidebar-menu > li:hover > a {
          background-color: #34495E;
        }
        .box {
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .box-title {
          font-size: 18px;
          font-weight: bold;
        }
        .value-box {
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
      "))
    ),
    tabItems(
      
      # Tab Home
      tabItem(tabName = "home",
        div(style = "text-align: center;",
            img(src = "www/logo7.png", height = 150, style = "margin-bottom: 10px;"),
            h2("Welcome to Dekirume!", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
            p(strong("Your One-Stop Shop for Everything You Love!"), 
              style = "color: #FF4500; font-size: 22px; margin-top: 10px; font-family: 'Verdana', sans-serif; font-weight: bold;")
        ),
        fluidRow(
          valueBoxOutput("total_sales", width = 3),
          valueBoxOutput("total_products_sold", width = 3),
          valueBoxOutput("total_customers", width = 3),
          valueBoxOutput("total_discounts", width = 3)
        ),
        box(title = "Latest Updates", width = 12, status = "info", solidHeader = TRUE, p("Stay tuned for new product releases and offers!")),
        fluidRow(
          box(title = "Monthly Sales", width = 12, status = "primary", solidHeader = TRUE, plotlyOutput("monthly_sales_plot"))
        )
      ),
      
      # Tab Product Recommendation
     tabItem(tabName = "product_recommendation",
  h2("Product Recommendation", align = "center", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(title = "Best Selling Products by Location", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("location_plot")),
    box(title = "Best Selling Products by Gender", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("gender_plot"))
  ),
  fluidRow(
    box(title = "Top 5 Best Selling Products", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("best_selling_plot")),
    box(title = "Best Selling Products by Age", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("age_plot"))
  )
),
      
      # Tab Product Category
      tabItem(tabName = "product_category",
        h2("Product Category", align = "center", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
            uiOutput("product_category_ui")  # Menampilkan grafik untuk setiap kategori
      ),
      
      # Tab Gallery Produk
      tabItem(tabName = "gallery_produk",
        h2("Gallery Produk", align = "center", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
        uiOutput("gallery_produk_ui")
      ),
      
      # Tab Transactions
      tabItem(tabName = "transactions",
        h2("Transactions", align = "center", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
        box(title = "Recent Transactions", width = 12, status = "primary", solidHeader = TRUE, dataTableOutput("out_tbl_transaction"))
      ),
      
      # Tab Vouchers
     tabItem(tabName = "vouchers",
  h2("Available Vouchers", align = "center", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(title = "Choose Vouchers", width = 6, status = "primary", solidHeader = TRUE,
        selectizeInput("voucher_select", "Select Voucher(s)", choices = NULL, multiple = TRUE)),
    box(title = "Voucher Usage by Age Group", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_plot"))
  ),
  fluidRow(
    box(title = "Voucher Usage by Gender", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_gender_plot")),
    box(title = "Voucher Usage by Category", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_category_plot"))
        )
      ),
      
      # Tab Payment Methods
      tabItem(tabName = "payment_methods",
        h2("Payment Methods", align = "center", style = "color: #FF4500; font-size: 32px; font-weight: bold;"),
        fluidRow(
          column(4, actionButton("pay_card", "💳 Credit/Debit Card", style = "width: 100%; background-color: #007bff; color: white;")),
          column(4, actionButton("pay_wallet", "📱 Digital Wallets", style = "width: 100%; background-color: #28a745; color: white;")),
          column(4, actionButton("pay_paypal", "🅿 PayPal", style = "width: 100%; background-color: #ffc107; color: black;"))
        )
      ),
      
      # Tab Our Team
      tabItem(tabName = "our_team",
        h2("Meet Our Team", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        p("We are a dedicated team passionate about delivering the best solutions.", 
          style = "text-align: center; font-size: 18px; color: #555; margin-bottom: 30px;"),
        
        fluidRow(
          # Dela Gustiara - Frontend & Backend Developer
          box(
            title = "Dela Gustiara (M0501241024) - Frontend & Backend Developer",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/Image/dela.png", width = "100%", style = "border-radius: 10px;"),
            p("Develops intuitive user interfaces and efficient backend systems for seamless integration.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
          
          # Rupmana Br Butar Butar - Database Manager
          box(
            title = "Rupmana Br Butar Butar (M0501241071) - Database Manager",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/Image/mega.png", width = "100%", style = "border-radius: 10px;"),
            p("Responsible for managing and optimizing our database systems.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          )
        ),
        
        fluidRow(
          # Rizqi Annafi Muhadi - Copywriter
          box(
            title = "Rizqi Annafi Muhadi (M0501241061) - Copywriter",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/Image/rizki.png", width = "100%", style = "border-radius: 10px;"),
            p("Creates engaging content to convey brand messages clearly and effectively.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
          
          # Mega Maulina - Database Designer
          box(
            title = "Mega Maulina (M0501241047) - Database Designer",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/rupmana.png", width = "100%", style = "border-radius: 10px;"),
            p("Designs and optimizes database structures for better performance.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          )
        )
      )
    )
  )
)
```

### Server-Dashboard Page

```{r}
server <- function(input, output, session) {
  
  # Koneksi ke database
  con_db <- dbConnect(
    MySQL(),
    host = "127.0.0.1",
    port = 3306,
    user = "root",
    password = "",
    dbname = "database_os"
  )
  
  # Cek koneksi database
  if (dbIsValid(con_db)) {
    message("Koneksi database berhasil!")
  } else {
    message("Gagal terhubung ke database. Periksa konfigurasi koneksi.")
  }
  
  # Query Data Transaksi
  transactions <- reactive({
    query <- "
      SELECT t.TransactionID, t.Transaction_Date, t.Price, t.Total_Price, t.Discount_Price, 
             t.Quantity, t.CustomerID, t.ProductID, t.PMID, t.VoucherID, t.Voucher_status, t.Discount,
             c.Gender, c.Locations, c.Age,
             p.Product_name, p.Product_Category,
             v.Voucher_name, v.Discount AS Voucher_Discount,
             pm.Method_name
      FROM data_transaction t
      LEFT JOIN data_customer c ON t.CustomerID = c.CustomerID
      LEFT JOIN data_product p ON t.ProductID = p.ProductID
      LEFT JOIN data_voucher v ON t.VoucherID = v.VoucherID
      LEFT JOIN data_payment_method pm ON t.PMID = pm.PMID
    "
    df <- dbGetQuery(con_db, query)
    
    # Konversi Transaction_Date ke format Date
    df$Transaction_Date <- as.Date(df$Transaction_Date, format = "%Y-%m-%d")
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data transaksi: ", nrow(df))
    
    df
  })
  # Query Data Customer
  customers <- reactive({
    query <- "SELECT * FROM data_customer"
    df <- dbGetQuery(con_db, query)
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data customer: ", nrow(df))
    
    df
  })
  # Query Data Produk
  products <- reactive({
    query <- "SELECT * FROM data_product"
    df <- dbGetQuery(con_db, query)
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data produk: ", nrow(df))
    
    df
  })
  
  # Query Data Voucher
  vouchers <- reactive({
  query <- "
    SELECT dt.TransactionID, dt.CustomerID, dt.ProductID, dt.VoucherID,
           dt.Voucher_status, dc.Age, dc.Gender, dp.Product_Category, dv.Voucher_name
    FROM data_transaction dt
    LEFT JOIN data_customer dc ON dt.CustomerID = dc.CustomerID
    LEFT JOIN data_product dp ON dt.ProductID = dp.ProductID
    LEFT JOIN data_voucher dv ON dt.VoucherID = dv.VoucherID
    WHERE dt.Voucher_status = 'Used';
  "
  df <- dbGetQuery(con_db, query)
  df <- df %>%
    mutate(Age_Group = cut(Age, breaks = c(0, 18, 30, 50, 100),
                         labels = c("Under 18", "18-30", "31-50", "Over 50"), include.lowest = TRUE))
  # Debugging: Cek data yang diambil
  message("Jumlah baris data voucher: ", nrow(df))
  
  df
})
  
  
  # Total Sales
  output$total_sales <- renderValueBox({
    total_sales <- sum(transactions()$Total_Price, na.rm = TRUE)
    valueBox(value = paste0("Rp", format(total_sales, big.mark = ",")), subtitle = "Total Sales", icon = icon("money-bill-wave"), color = "green")
  })
  
  # Total Products Sold
  output$total_products_sold <- renderValueBox({
    total_products <- sum(transactions()$Quantity, na.rm = TRUE)
    valueBox(value = format(total_products, big.mark = ","), subtitle = "Total Products Sold", icon = icon("shopping-cart"), color = "blue")
  })
  
  # Total Customers
  output$total_customers <- renderValueBox({
    total_customers <- length(unique(customers()$CustomerID))
    valueBox(value = format(total_customers, big.mark = ","), subtitle = "Total Customers", icon = icon("users"), color = "orange")
  })
  
  # Total Discounts
  output$total_discounts <- renderValueBox({
    total_discounts <- sum(transactions()$Discount_Price, na.rm = TRUE)
    valueBox(value = paste0("Rp", format(total_discounts, big.mark = ",")), subtitle = "Total Discounts", icon = icon("tags"), color = "red")
  })
  
  # Monthly Sales Trend
  output$monthly_sales_plot <- renderPlotly({
  sales_data <- transactions() %>%
    mutate(Month = floor_date(Transaction_Date, "month")) %>%
    group_by(Month) %>%
    summarise(Total_Sales = sum(Total_Price), .groups = "drop") %>%
    arrange(Month)

  plot_ly(sales_data, x = ~Month, y = ~Total_Sales, type = 'scatter', mode = 'lines+markers',
          line = list(color = 'rgb(55, 83, 109)', width = 2),
          marker = list(color = 'rgb(26, 118, 255)', size = 6)) %>%
    layout(
      title = list(text = "Monthly Sales", x = 0.5, font = list(size = 16, color = "black")),
      xaxis = list(title = "Month", tickformat = "%Y-%m", showgrid = TRUE, tickangle = -45),
      yaxis = list(title = "Total Sales ($)", showgrid = TRUE, zeroline = FALSE),
      hovermode = "x unified",
      margin = list(l = 50, r = 50, t = 50, b = 70)
    )
})
  
 # Best Selling Products by Location (Horizontal, Descending)
output$location_plot <- renderPlotly({
    location_data <- transactions() %>%
      group_by(Locations) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales))  # Urut dari tinggi ke rendah

    plot_ly(location_data, y = ~reorder(Locations, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'green'), orientation = 'h') %>%
      layout(title = "Best Selling Products by Location",
             xaxis = list(title = "Total Sales ($)"),
             yaxis = list(title = "Location"))
})

# Best Selling Products by Gender (Horizontal, Descending)
output$gender_plot <- renderPlotly({
    gender_data <- transactions() %>%
      group_by(Gender) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales))

    plot_ly(gender_data, y = ~reorder(Gender, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'purple'), orientation = 'h') %>%
      layout(title = "Best Selling Products by Gender",
             xaxis = list(title = "Total Sales ($)"),
             yaxis = list(title = "Gender"))
})

# Top 5 Best Selling Products (Horizontal, Descending)
output$best_selling_plot <- renderPlotly({
    best_selling_data <- transactions() %>%
      group_by(ProductID, Product_name) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales)) %>%
      head(5)  # Ambil 5 teratas

    plot_ly(best_selling_data, y = ~reorder(Product_name, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'orange'), orientation = 'h') %>%
      layout(title = "Top 5 Best Selling Products",
             xaxis = list(title = "Total Sales ($)"),
             yaxis = list(title = "Product"))
})
# Best Selling Products by Age (Horizontal, Descending)
output$age_plot <- renderPlotly({
    age_data <- transactions() %>%
      left_join(data_customer, by = "Age") %>%  # Join ke tabel customer untuk ambil Age
      group_by(Age) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales)) %>%
      head(5)

    plot_ly(age_data, y = ~reorder(Age, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'blue'), orientation = 'h') %>%
      layout(title = "Top 5 Best Selling Products by Age",
             xaxis = list(title = "Total Sales ($)"),
             yaxis = list(title = "Age"))
})

# Voucher Usage by Age Group
output$voucher_usage_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Age_Group) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage, x = ~Age_Group, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(158, 202, 225)'),
          text = ~paste("Age Group: ", Age_Group, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>%  # Menampilkan tooltip
    layout(title = "Voucher Usage by Age Group",
           xaxis = list(title = "Age Group"),
           yaxis = list(title = "Count"))
})
# UI Product Category (menampilkan grafik 3 produk tertinggi per kategori)
output$product_category_ui <- renderUI({
  categories <- unique(product_data$Product_Category)
  num_categories <- length(categories)
  
  # Bagi kategori menjadi 2 kolom
  split_categories <- split(categories, rep(1:2, length.out = num_categories))
  
  fluidRow(
    lapply(1:2, function(i) {
      column(
        width = 6,
        lapply(split_categories[[i]], function(category) {
          box(
            title = paste("Top 3 Products in", category),  # Judul hanya di kotak, bukan di dalam grafik
            width = 12, status = "primary", solidHeader = TRUE,
            style = "border-radius: 8px; box-shadow: 2px 2px 6px rgba(0,0,0,0.1);",
            plotlyOutput(paste0("bar_chart_", gsub(" ", "_", category)))  # Hanya grafik
          )
        })
      )
    })
  )
})

# Bar chart untuk 3 produk tertinggi per kategori
lapply(unique(product_data$Product_Category), function(category) {
  output[[paste0("bar_chart_", gsub(" ", "_", category))]] <- renderPlotly({
    top_products <- product_data %>%
      filter(Product_Category == category) %>%
      arrange(desc(Price)) %>%
      head(3)
    
    # Warna gradient berdasarkan harga
    colors <- colorRampPalette(c("#1E90FF", "#87CEEB"))(nrow(top_products))  

    plot_ly(top_products, 
            y = ~factor(Product_name, levels = rev(Product_name)),  
            x = ~Price, 
            type = 'bar',
            orientation = 'h',  
            marker = list(color = colors, line = list(color = '#1E90FF', width = 1.5)),  
            hoverinfo = 'text',
            text = ~paste0("Price:", Price),  # Hanya harga yang muncul saat hover
            hoverlabel = list(bgcolor = "white", font = list(size = 12, color = "black"))) %>%
      layout(
        title = "",  # **Judul grafik dihapus**
        xaxis = list(
          title = "Price",
          showgrid = TRUE,
          gridcolor = '#f0f0f0',
          titlefont = list(size = 14, color = "#2C3E50")
        ),
        yaxis = list(
          title = "",
          tickfont = list(size = 12),
          showgrid = FALSE,
          titlefont = list(size = 14, color = "#2C3E50"),
          automargin = TRUE  # Pastikan margin otomatis agar teks tidak terpotong
        ),
        margin = list(l = 200, r = 50, t = 30, b = 70),  # Sedikit kurangi margin atas
        paper_bgcolor = 'rgba(0,0,0,0)',
        plot_bgcolor = 'rgba(0,0,0,0)',
        showlegend = FALSE
      ) %>%
      config(displayModeBar = FALSE)
  })
})


    
# Galeri Produk seperti Tabel dengan Gambar
output$gallery_produk_ui <- renderUI({
  product_data <- products()  # Ambil data produk dari database
  categories <- unique(product_data$Product_Category)  # Daftar kategori unik
  
  # Buat tabel untuk menampilkan produk per kategori
  tagList(
    # Header Tabel (Nama Kategori)
    fluidRow(
      lapply(categories, function(category) {
        column(
          width = 3,  # Lebar kolom (3 kolom per kategori)
          h4(category, style = "text-align: center; color: #1E90FF; font-size: 20px; font-weight: bold; margin-bottom: 20px;")
        )
      })
    ),
    
    # Baris Produk
    fluidRow(
      lapply(categories, function(category) {
        # Filter produk berdasarkan kategori
        category_products <- product_data %>% filter(Product_Category == category)
        
        # Tampilkan produk dalam kolom
        column(
          width = 3,  # Lebar kolom (3 kolom per kategori)
          lapply(1:nrow(category_products), function(i) {
            box(
              title = category_products$Product_name[i],
              width = 12,  # Lebar box (full width dalam kolom)
              status = "primary",
              solidHeader = TRUE,
              fluidRow(
                column(
                  width = 12,  # Kolom untuk gambar (full width)
                  img(src = category_products$Image_Path[i], width = "100%", style = "border-radius: 10px; margin-bottom: 10px;")
                ),
                column(
                  width = 12,  # Kolom untuk deskripsi (full width)
                  p(category_products$Product_Description[i], style = "font-size: 14px; color: #333; text-align: justify;")
                )
              )
            )
          })
        )
      })
    )
  )
})

# Update Pilihan Voucher di selectizeInput
observe({
  voucher_names <- unique(vouchers()$Voucher_name)
  updateSelectizeInput(session, "voucher_select", choices = voucher_names, selected = NULL)
})

# Voucher Usage by Age Group
output$voucher_usage_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Age_Group) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage, x = ~Age_Group, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(158, 202, 225)'),
          text = ~paste("Age Group: ", Age_Group, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>%  # Menampilkan tooltip
    layout(title = "Voucher Usage by Age Group",
           xaxis = list(title = "Age Group"),
           yaxis = list(title = "Count"))
})

# Voucher Usage by Gender
output$voucher_usage_gender_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage_gender <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Gender) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage_gender, x = ~Gender, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(26, 118, 255)'),
          text = ~paste("Gender: ", Gender, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>%  # Menampilkan tooltip
    layout(title = "Voucher Usage by Gender",
           xaxis = list(title = "Gender"),
           yaxis = list(title = "Count"))
})

# Voucher Usage by Category (Pie Chart)
output$voucher_usage_category_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage_category <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Voucher_name) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage_category, labels = ~Voucher_name, values = ~Count, type = 'pie',
          marker = list(colors = c('rgb(55, 83, 109)', 'rgb(26, 118, 255)', 'rgb(158, 202, 225)')),
          textinfo = 'label+percent',  # Menampilkan label dan persentase
          hoverinfo = 'label+percent+value',  # Tooltip
          textposition = 'inside') %>%  # Posisi teks di dalam pie chart
    layout(title = "Voucher Usage by Category",
           showlegend = TRUE)
})
  # Tabel Transaksi
  output$out_tbl_transaction <- renderDataTable({
    datatable(transactions(), options = list(pageLength = 5, scrollX = TRUE))
  })
  
  # Tabel Produk
  output$out_tbl_product <- renderDataTable({
    datatable(products(), options = list(pageLength = 5))
  })
  
  # Tabel Voucher
  output$out_tbl_voucher <- renderDataTable({
    datatable(vouchers(), options = list(pageLength = 5))
  })
  
  # Tutup koneksi database saat aplikasi berhenti
  onStop(function() {
    dbDisconnect(con_db)
    message("Koneksi database ditutup.")
  })
}
```

###Memanggil dashboard
```{r}
shinyApp(ui, server)
```
