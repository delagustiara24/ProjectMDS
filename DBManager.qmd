---
title: "DBManager"
format: html
---

```{r}
library(DBI)
library(RMySQL)
library(glue)
library(dplyr)
```

```{r}
# Konfigurasi database
db_config <- list(
  host = "127.0.0.1",
  port = 3306,          # Port MySQL di DBngin
  user = "root",
  password = "",
  dbname = "database_os"    # Nama database yang akan dibuat
)
```

```{r}
# Koneksi ke MySQL
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password
)

dbExecute(con, glue("CREATE DATABASE IF NOT EXISTS {db_config$dbname}"))
message("Database ", db_config$dbname, " berhasil dibuat/ditemukan")

dbDisconnect(con)
```

```{r}
# Koneksi ke database yang dibuat
con_db <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)
```

```{r}
# Definisi tabel dengan tipe data yang benar
table_definitions <- list(
  data_customer = "
    CREATE TABLE IF NOT EXISTS data_customer (
      CustomerID INT PRIMARY KEY,
      Gender VARCHAR(10),
      Locations VARCHAR(50),
      Age INT
    )
  ",
  
  data_voucher = "
    CREATE TABLE IF NOT EXISTS data_voucher (
      VoucherID VARCHAR(10) PRIMARY KEY,
      Voucher_name VARCHAR(100),
      Discount DECIMAL(5,2)
    )
  ",

  data_payment_method = "
    CREATE TABLE IF NOT EXISTS data_payment_method (
      PMID VARCHAR(10) PRIMARY KEY,
      Method_name VARCHAR(50)
    )
  ",
  
  data_product = "
    CREATE TABLE IF NOT EXISTS data_product (
      ProductID VARCHAR(20) PRIMARY KEY,
      Product_name VARCHAR(100),
      Product_Description TEXT,
      Product_Category VARCHAR(50),
      Stock INT,
      Price DECIMAL(10,2)
    )
  ",
  
  data_transaction = "
    CREATE TABLE IF NOT EXISTS data_transaction (
      TransactionID INT PRIMARY KEY,
      Transaction_Date DATE,
      Price DECIMAL(10,2),
      Total_Price DECIMAL(10,2),
      Discount_Price DECIMAL(10,2),
      Quantity INT,
      CustomerID INT,
      ProductID VARCHAR(20),
      PMID VARCHAR(10),
      VoucherID VARCHAR(10) NULL,
      Voucher_status VARCHAR(20),
      Discount DECIMAL(5,2),
      FOREIGN KEY (CustomerID) REFERENCES data_customer(CustomerID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (ProductID) REFERENCES data_product(ProductID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (VoucherID) REFERENCES data_voucher(VoucherID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (PMID) REFERENCES data_payment_method(PMID) ON DELETE CASCADE ON UPDATE CASCADE
    )
  "
)
```

```{r}
# Membuat tabel
dbBegin(con_db)
for (table_name in names(table_definitions)) {
  dbExecute(con_db, table_definitions[[table_name]])
  message("Tabel ", table_name, " berhasil dibuat")
}
dbCommit(con_db)
```

```{r}
dbExecute(con_db, "SET GLOBAL local_infile = 1;")
dbGetQuery(con_db, "SHOW VARIABLES LIKE 'local_infile';")
```

```{r}
# Load data dari file CSV
data_customer <- read.csv("Dataset_4/data_customer.csv")
data_product <- read.csv("Dataset_4/data_product.csv")
data_transaction <- read.csv("Dataset_4/data_transaction.csv")
data_voucher <- read.csv("Dataset_4/data_voucher.csv")

# Menonaktifkan notasi ilmiah di seluruh sesi R
options(scipen = 999)

# Tentukan kurs USD ke IDR
exchange_rate <- 15000

# Perubahan data_product
# Pastikan Price tetap numerik sebelum dikonversi
data_product <- data_product %>%
  mutate(
    Price = as.numeric(Price) * exchange_rate,  # Pastikan Price tetap numerik
    Stock = as.integer(Stock)  # Pastikan Stock dalam format integer biasa
  )

# Perubahan data_transaction
data_transaction <- data_transaction %>%
  left_join(data_voucher, by = "VoucherID") %>%
  mutate(
    Discount = ifelse(Voucher_status == "Used", Discount, 0)  # Jika "Used", ambil diskon, jika tidak, 0
  )

# Konversi Total_Price ke IDR tanpa format string
data_transaction <- data_transaction %>%
  mutate(
    Total_Price = as.numeric(Total_Price) * exchange_rate  # Pastikan tetap numerik
  )

# Gabungkan data_transaction dengan data_product berdasarkan ProductID
data_transaction <- data_transaction %>%
  left_join(data_product %>% select(ProductID, Price), by = "ProductID") %>%
  mutate(
    Discount = Discount / 100,  # Ubah Discount dari persentase ke desimal
    Discount_Price = Price * Discount  # Hitung harga diskon
  )

# Memastikan Price dan Total_Price tetap numerik untuk MySQL
data_transaction <- data_transaction %>%
  mutate(
    Price = as.numeric(Price),  # Pastikan tetap numerik
    Total_Price = as.numeric(Total_Price)  # Pastikan tetap numerik
  )

# Menyusun ulang kolom sesuai urutan yang diinginkan
data_transaction <- data_transaction %>%
  select(TransactionID, Transaction_Date, Price, Total_Price, Discount_Price, 
         Quantity, CustomerID, ProductID, PMID, VoucherID, 
         Voucher_status, Discount)

# Format Discount sebagai persentase hanya untuk tampilan, bukan penyimpanan
data_transaction <- data_transaction %>%
  mutate(
    Discount = ifelse(Discount == 0, "", paste0(Discount * 100, "%"))  # Hanya tambahkan "%" jika tidak 0
  )

# Membuat dataset baru 'data_payment_method'
data_payment_method <- data_transaction %>%
  select(PMID) %>%
  distinct() %>%
  mutate(Method_name = case_when(
    PMID == "PM01" ~ "Card",
    PMID == "PM02" ~ "Paypal",
    PMID == "PM03" ~ "Digital Wallets",
    PMID == "PM04" ~ "Other"
  ))

# Menampilkan hasil
View(data_customer)
View(data_product)
View(data_transaction)
View(data_voucher)
View(data_payment_method)
```

```{r}
# Verifikasi tabel yang dibuat
tryCatch({
  existing_tables <- dbGetQuery(con_db, "SHOW TABLES")
  message("\nTabel yang tersedia di database ", db_config$dbname, ":")
  print(existing_tables)
}, error = function(e) {
  dbRollback(con_db)
  message("Error membuat tabel: ", e$message)
})
```

```{r}
# Menyimpan data ke database
dbWriteTable(con_db, "data_customer", data_customer, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_product", data_product, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_voucher", data_voucher, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_transaction", data_transaction, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_payment_method", data_payment_method, append = TRUE, row.names = FALSE)

message("Data berhasil dimasukkan ke database!")
```

```{r}
dbDisconnect(con_db)
message("\nKoneksi database ditutup")
```
