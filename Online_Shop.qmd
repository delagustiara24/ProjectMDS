---
title: "Project MDS - UTS"
author: "Rupmana Br Butar Butar"
title: "Online_Shop"
format: html
---

1.  Library yang digunakan

```{r}
library(DBI)
library(RMySQL)
library(glue)
library(dplyr)
```

2.  Konfigurasi Database DBngin

```{r}
db_config <- list(
 host = "127.0.0.1",
  port = 3308,          # Port MySQL di DBngin
  user = "root",
  password = "",
  dbname = "database_olshop"    # Nama database yang akan dibuat
)
```

3.  Membuat koneksi ke MySQL server

```{r}
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
 )
```

4.  Membuat database jika belum ada

```{r}
tryCatch({
  dbExecute(con, glue("CREATE DATABASE IF NOT EXISTS {db_config$dbname}"))
  message("Database ", db_config$dbname, " berhasil dibuat/ditemukan")
 }, error = function(e) {
  message("Gagal membuat database: ", e$message)
 })
```

5.  Membuat struktur tabel dengan Relasi Primary dan Foreign Key

```{r}
table_definitions <- list(
  data_customer = "
    CREATE TABLE IF NOT EXISTS data_customer (
      CustomerID INT PRIMARY KEY,
      Gender VARCHAR(10),
      Locations VARCHAR(50),
      Age INT
    )
  ",
  
  
  data_voucher = "
    CREATE TABLE IF NOT EXISTS data_voucher (
      VoucherID VARCHAR(10) PRIMARY KEY,
      Voucher_name VARCHAR(100),
      Discount DECIMAL(5,2)
    )
  ",
  
  data_payment_method = "
    CREATE TABLE IF NOT EXISTS data_payment_method (
      PMID VARCHAR(10) PRIMARY KEY,
      Method_name VARCHAR(50)
    )
  ",

  data_product = "
    CREATE TABLE IF NOT EXISTS data_product (
      ProductID VARCHAR(20) PRIMARY KEY,
      Product_name VARCHAR(100),
      Product_Description TEXT,
      Product_Category VARCHAR(50),
      Stock INT,
      Price DECIMAL(10,2)
    )
  ",
  
  data_online_shop = "
    CREATE TABLE IF NOT EXISTS data_online_shop (
      CustomerID INT,
      Gender VARCHAR(10),
      Locations VARCHAR(50),
      Age INT,
      ProductID VARCHAR(20),
      Product_name VARCHAR(100),
      Product_Description TEXT,
      Product_Category VARCHAR(50),
      Stock INT,
      Price DECIMAL(10,2),
      TransactionID INT,
      Transaction_Date DATE,
      Total_Price DECIMAL(10,2),
      Quantity INT,
      VoucherID VARCHAR(10),
      Voucher_name VARCHAR(100),
      Voucher_status VARCHAR(20),
      Discount DECIMAL(5,2),
      PMID VARCHAR(10),
      Method_name VARCHAR(50),
      FOREIGN KEY (CustomerID) REFERENCES data_customer(CustomerID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (ProductID) REFERENCES data_product(ProductID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (VoucherID) REFERENCES data_voucher(VoucherID) ON DELETE CASCADE ON UPDATE CASCADE
    )
  ",
  
  data_transaction = "
    CREATE TABLE IF NOT EXISTS data_transaction (
      TransactionID INT PRIMARY KEY,
      Transaction_Date DATE,
      Total_Price DECIMAL(10,2),
      Quantity INT,
      CustomerID INT,
      ProductID VARCHAR(20),
      PMID VARCHAR(10),
      VoucherID VARCHAR(10) NULL,
      Voucher_status VARCHAR(20),
      FOREIGN KEY (CustomerID) REFERENCES data_customer(CustomerID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (ProductID) REFERENCES data_product(ProductID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (VoucherID) REFERENCES data_voucher(VoucherID) ON DELETE CASCADE ON UPDATE CASCADE,
      FOREIGN KEY (PMID) REFERENCES data_payment_method(PMID) ON DELETE CASCADE ON UPDATE CASCADE
    )
  "
)
```

6.  Eksekusi pembuatan tabel

```{r}
con_db <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname,
  client.flag = CLIENT_LOCAL_FILES
)


# Mulai transaksi
dbBegin(con_db)
 
for (table_name in names(table_definitions)) {
  dbExecute(con_db, table_definitions[[table_name]])
  message("Tabel ", table_name, " berhasil dibuat")
}

# Commit transaksi
dbCommit(con_db)
```

```{r}
dbExecute(con_db, "SET GLOBAL local_infile = 1;")
dbGetQuery(con_db, "SHOW VARIABLES LIKE 'local_infile';")
```

7.  Data yang digunakan :

```{r}
# Load Data
data_customer <- read.csv("Dataset_4/data_customer.csv")
data_online_shop <- read.csv("Dataset_4/data_online_shop.csv")
data_product <- read.csv("Dataset_4/data_product.csv")
data_transaction <- read.csv("Dataset_4/data_transaction.csv")
data_voucher <- read.csv("Dataset_4/data_voucher.csv")

# membuat dataset baru 'data_payment_method' dengan nilai tetap
data_payment_method <- data_online_shop %>%
  select(PMID, Method_name) %>%
  distinct()  # Menghapus duplikat, agar tiap metode pembayaran unik

View(data_customer)
View(data_online_shop)
View(data_product)
View(data_transaction)
View(data_voucher)
View(data_payment_method)
```

```{r}
# Verifikasi tabel yang dibuat
tryCatch({
  existing_tables <- dbGetQuery(con_db, "SHOW TABLES")
  message("\nTabel yang tersedia di database ", db_config$dbname, ":")
  print(existing_tables)

}, error = function(e) {
  dbRollback(con_db)
  message("Error membuat tabel: ", e$message)
})
```

s

```{r}
dbWriteTable(con_db, "data_customer", data_customer, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_product", data_product, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_voucher", data_voucher, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_transaction", data_transaction, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_online_shop", data_online_shop, append = TRUE, row.names = FALSE)
dbWriteTable(con_db, "data_payment_method", data_payment_method, append = TRUE, row.names = FALSE)
```

```{r}
dbDisconnect(con_db)
  dbDisconnect(con)
  message("\nKoneksi database ditutup")
```
