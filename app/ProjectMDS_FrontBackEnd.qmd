---
title: "Project MDS - UTS"
author: "Dela Gustiara - M0501240124"
title: "Front End-Back End"
format: html
---
## DELA GUSTIARA-Front END

```{r}
library(DBI)
library(RMySQL)
library(glue)

# Konfigurasi database
db_config <- list(
  host = "127.0.0.1",
  port = 3307,          # Sesuaikan dengan port MySQL kamu
  user = "root",
  password = "",
  dbname = "database_os"    # Nama database yang ingin dipakai
)

# Koneksi awal ke server MySQL (tanpa database)
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password
)

# Cek apakah database sudah ada
db_list <- dbGetQuery(con, "SHOW DATABASES")
db_exists <- db_config$dbname %in% db_list$Database

if (db_exists) {
  message("Database '", db_config$dbname, "' sudah ada.")
} else {
  dbExecute(con, glue("CREATE DATABASE `{db_config$dbname}`"))
  message("Database '", db_config$dbname, "' berhasil dibuat.")
}

# Tutup koneksi awal
dbDisconnect(con)

# Koneksi ulang langsung ke database yang ditentukan
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)

message("Terhubung ke database '", db_config$dbname, "'.")

# Nanti setelah selesai kerja
# dbDisconnect(con)

```

### UI-Dashboard Page

```{r}
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(ggplot2)
library(dplyr)
library(readr)
library(lubridate)
# UI
ui <- dashboardPage(
  dashboardHeader(
    title = div(
      style = "text-align: center; 
               background: linear-gradient(90deg, #FFD700, #FFFFFF); 
               -webkit-background-clip: text; 
               -webkit-text-fill-color: transparent; 
               font-size: 50px; 
               font-weight: bold; 
               font-family: 'Arial Black', sans-serif; 
               text-shadow: 2px 2px 4px rgba(0,0,0,0.3);",
      h1("Dekirume", style = "margin: 0;")
    )
  ),
  
  # Sidebar
  dashboardSidebar(
    sidebarMenu(
      menuItem("Home", tabName = "home", icon = icon("home")),
      menuItem("Products", icon = icon("boxes"),
               menuSubItem("Product Best Selling", tabName = "product_best_selling", icon = icon("thumbs-up")),
               menuSubItem("Product Category", tabName = "product_category", icon = icon("list")),
               menuSubItem("Gallery Product", tabName = "gallery_product", icon = icon("image"))
      ),
      menuItem("Transactions", tabName = "transactions", icon = icon("shopping-cart")),
      menuItem("Vouchers", tabName = "vouchers", icon = icon("ticket-alt")),
      menuItem("Payment Methods", tabName = "payment_methods", icon = icon("credit-card")),
      menuItem("Our Team", tabName = "our_team", icon = icon("users"))
    )
  ),

  # Body
  dashboardBody(
    tags$head(
      tags$style(HTML("
        /* Custom CSS for the dashboard */
        .skin-blue .main-header .logo {
          background-color: #4682B4;
          color: white;
          font-weight: bold;
        }
        .skin-blue .main-header .navbar {
          background-color: #4682B4;
        }
        .skin-blue .main-sidebar {
          background-color:  #4682B4;
        }
        .skin-blue .main-sidebar .sidebar-menu > li > a {
          color: white;
        }
        .skin-blue .main-sidebar .sidebar-menu > li:hover > a {
          background-color: #4682B4;
        }
        .box {
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .box-title {
          font-size: 18px;
          font-weight: bold;
        }
        .value-box {
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
      "))
    ),
    tabItems(
      
      # Tab Home
      tabItem(tabName = "home",
        div(style = "text-align: center;",
            img(src = "www/logo7.png", height = 150, style = "margin-bottom: 10px;"),
            h2("Welcome to Dekirume!", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
            p(strong("Your One-Stop Shop for Everything You Love!"), 
              style = "color: #2C3E50; font-size: 22px; margin-top: 10px; font-family: 'Verdana', sans-serif; font-weight: bold;")
        ),
        fluidRow(
          valueBoxOutput("total_sales", width = 3),
          valueBoxOutput("total_products_sold", width = 3),
          valueBoxOutput("total_customers", width = 3),
          valueBoxOutput("total_discounts", width = 3)
        ),
        box(title = "Annual Sales Report", width = 12, status = "info", solidHeader = TRUE, p("Access the complete annual sales report, featuring detailed insights, charts, and actionable recommendations.")),
        fluidRow(
          box(title = "Monthly Sales", width = 12, status = "primary", solidHeader = TRUE, plotlyOutput("monthly_sales_plot"))
        )
      ),
      
      # Tab Product Recommendation
     tabItem(tabName = "product_best_selling",
  h2("Product Best Selling", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(title = "Best Selling Products by Location", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("location_plot")),
    box(title = "Best Selling Products by Gender", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("gender_plot"))
  ),
  fluidRow(
    box(title = "Top 5 Best Selling Products", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("best_selling_plot")),
    box(title = "Best Selling Products by Age", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("age_plot"))
  )
),
      
      # Tab Product Category
      tabItem(tabName = "product_category",
        h2("Product Category", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
            uiOutput("product_category_ui")  
      ),
      
      # Tab Gallery Produk
      tabItem(tabName = "gallery_product",
        h2("Gallery Product", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        uiOutput("gallery_product_ui")
      ),
      
      # Tab Transactions
      tabItem(tabName = "transactions",
        h2("Transactions", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        box(title = "Recent Transactions", width = 12, status = "primary", solidHeader = TRUE, dataTableOutput("out_tbl_transaction"))
      ),
      
      # Tab Vouchers
     tabItem(tabName = "vouchers",
  h2("Available Vouchers", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(title = "Choose Vouchers", width = 6, status = "primary", solidHeader = TRUE,
        selectizeInput("voucher_select", "Select Voucher(s)", choices = NULL, multiple = TRUE)),
    box(title = "Voucher Usage by Age Group", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_plot"))
  ),
  fluidRow(
    box(title = "Voucher Usage by Gender", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_gender_plot")),
    box(title = "Voucher Usage by Category", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_category_plot"))
        )
      ),
      
      # Tab Payment Methods
      tabItem(tabName = "payment_methods",
        h2("Payment Methods", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        fluidRow(
          column(4, actionButton("pay_card", "ðŸ’³ Credit/Debit Card", style = "width: 100%; background-color: #007bff; color: white;")),
          column(4, actionButton("pay_wallet", "ðŸ“± Digital Wallets", style = "width: 100%; background-color: #28a745; color: white;")),
          column(4, actionButton("pay_paypal", "ðŸ…¿ PayPal", style = "width: 100%; background-color: #ffc107; color: black;"))
        )
      ),
      
      # Tab Our Team
      tabItem(tabName = "our_team",
        h2("Meet Our Team", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        p("We are a dedicated team passionate about delivering the best solutions.", 
          style = "text-align: center; font-size: 18px; color: #555; margin-bottom: 30px;"),
        
        fluidRow(
          box(
            title = "Dela Gustiara (M0501241024) - Frontend & Backend Developer",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/Image/dela.png", width = "100%", style = "border-radius: 10px;"),
            p("Develops intuitive user interfaces and efficient backend systems for seamless integration.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
          
          box(
            title = "Rupmana Br Butar Butar (M0501241071) - Database Manager",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/dela.jpg", width = "300px", style = "border-radius: 10px;"),
            p("Responsible for managing and optimizing our database systems.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          )
        ),
        
        fluidRow(
          # Rizqi Annafi Muhadi - Copywriter
          box(
            title = "Rizqi Annafi Muhadi (M0501241061) - Copywriter",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/Image/rizki.png", width = "100%", style = "border-radius: 10px;"),
            p("Creates engaging content to convey brand messages clearly and effectively.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
          
          box(
            title = "Mega Maulina (M0501241047) - Database Designer",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "www/rupmana.png", width = "100%", style = "border-radius: 10px;"),
            p("Designs and optimizes database structures for better performance.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          )
        )
      )
    )
  )
)
```

### Server-Dashboard Page

```{r}
server <- function(input, output, session) {
  
  # Koneksi ke database
  con_db <- dbConnect(
    MySQL(),
    host = "127.0.0.1",
    port = 3307,
    user = "root",
    password = "",
    dbname = "database_os"
  )
  
  # Cek koneksi database
  if (dbIsValid(con_db)) {
    message("Koneksi database berhasil!")
  } else {
    message("Gagal terhubung ke database. Periksa konfigurasi koneksi.")
  }
  
  # Query Data Transaksi
  transactions <- reactive({
    query <- "
      SELECT t.TransactionID, t.Transaction_Date, t.Price, t.Total_Price, t.Discount_Price, 
             t.Quantity, t.CustomerID, t.ProductID, t.PMID, t.VoucherID, t.Voucher_status, t.Discount,
             c.Gender, c.Locations, c.Age,
             p.Product_name, p.Product_Category,
             v.Voucher_name, v.Discount AS Voucher_Discount,
             pm.Method_name
      FROM data_transaction t
      LEFT JOIN data_customer c ON t.CustomerID = c.CustomerID
      LEFT JOIN data_product p ON t.ProductID = p.ProductID
      LEFT JOIN data_voucher v ON t.VoucherID = v.VoucherID
      LEFT JOIN data_payment_method pm ON t.PMID = pm.PMID
    "
    df <- dbGetQuery(con_db, query)
    
    # Konversi Transaction_Date ke format Date
    df$Transaction_Date <- as.Date(df$Transaction_Date, format = "%Y-%m-%d")
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data transaksi: ", nrow(df))
    
    df
  })
  # Query Data Customer
  customers <- reactive({
    query <- "SELECT * FROM data_customer"
    df <- dbGetQuery(con_db, query)
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data customer: ", nrow(df))
    
    df
  })
  # Query Data Produk
  products <- reactive({
    query <- "SELECT * FROM data_product"
    df <- dbGetQuery(con_db, query)
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data produk: ", nrow(df))
    
    df
  })
  
  # Query Data Voucher
  vouchers <- reactive({
  query <- "
    SELECT dt.TransactionID, dt.CustomerID, dt.ProductID, dt.VoucherID,
           dt.Voucher_status, dc.Age, dc.Gender, dp.Product_Category, dv.Voucher_name
    FROM data_transaction dt
    LEFT JOIN data_customer dc ON dt.CustomerID = dc.CustomerID
    LEFT JOIN data_product dp ON dt.ProductID = dp.ProductID
    LEFT JOIN data_voucher dv ON dt.VoucherID = dv.VoucherID
    WHERE dt.Voucher_status = 'Used';
  "
  df <- dbGetQuery(con_db, query)
  df <- df %>%
    mutate(Age_Group = cut(Age, breaks = c(0, 18, 30, 50, 100),
                         labels = c("Under 18", "18-30", "31-50", "Over 50"), include.lowest = TRUE))
  # Debugging: Cek data yang diambil
  message("Jumlah baris data voucher: ", nrow(df))
  
  df
})
  
  
  # Total Sales
  output$total_sales <- renderValueBox({
    total_sales <- sum(transactions()$Total_Price, na.rm = TRUE)
    valueBox(value = paste0("Rp", format(total_sales, big.mark = ",")), subtitle = "Total Sales", icon = icon("money-bill-wave"), color = "green")
  })
  
  # Total Products Sold
  output$total_products_sold <- renderValueBox({
    total_products <- sum(transactions()$Quantity, na.rm = TRUE)
    valueBox(value = format(total_products, big.mark = ","), subtitle = "Total Products Sold", icon = icon("shopping-cart"), color = "blue")
  })
  
  # Total Customers
  output$total_customers <- renderValueBox({
    total_customers <- length(unique(customers()$CustomerID))
    valueBox(value = format(total_customers, big.mark = ","), subtitle = "Total Customers", icon = icon("users"), color = "orange")
  })
  
  # Total Discounts
  output$total_discounts <- renderValueBox({
    total_discounts <- sum(transactions()$Discount_Price, na.rm = TRUE)
    valueBox(value = paste0("Rp", format(total_discounts, big.mark = ",")), subtitle = "Total Discounts", icon = icon("tags"), color = "red")
  })
  
  # Monthly Sales Trend
  output$monthly_sales_plot <- renderPlotly({
  sales_data <- transactions() %>%
    mutate(Month = floor_date(Transaction_Date, "month")) %>%
    group_by(Month) %>%
    summarise(Total_Sales = sum(Total_Price), .groups = "drop") %>%
    arrange(Month)

  plot_ly(sales_data, x = ~Month, y = ~Total_Sales, type = 'scatter', mode = 'lines+markers',
          line = list(color = 'rgb(55, 83, 109)', width = 2),
          marker = list(color = 'rgb(26, 118, 255)', size = 6)) %>%
    layout(
      title = list(text = "Monthly Sales", x = 0.5, font = list(size = 16, color = "black")),
      xaxis = list(title = "Month", tickformat = "%Y-%m", showgrid = TRUE, tickangle = -45),
      yaxis = list(title = "Total Sales (Rp)", showgrid = TRUE, zeroline = FALSE),
      hovermode = "x unified",
      margin = list(l = 50, r = 50, t = 50, b = 70)
    )
})
  
 # Best Selling Products by Location (Horizontal, Descending)
output$location_plot <- renderPlotly({
    location_data <- transactions() %>%
      group_by(Locations) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales))  # Urut dari tinggi ke rendah

    plot_ly(location_data, y = ~reorder(Locations, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'green'), orientation = 'h') %>%
      layout(title = "Best Selling Products by Location",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Location"))
})

# Best Selling Products by Gender (Horizontal, Descending)
output$gender_plot <- renderPlotly({
    gender_data <- transactions() %>%
      group_by(Gender) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales))

    plot_ly(gender_data, y = ~reorder(Gender, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'purple'), orientation = 'h') %>%
      layout(title = "Best Selling Products by Gender",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Gender"))
})

# Top 5 Best Selling Products (Horizontal, Descending)
output$best_selling_plot <- renderPlotly({
    best_selling_data <- transactions() %>%
      group_by(ProductID, Product_name) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales)) %>%
      head(5)  

    plot_ly(best_selling_data, y = ~reorder(Product_name, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'orange'), orientation = 'h') %>%
      layout(title = "Top 5 Best Selling Products",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Product"))
})
# Best Selling Products by Age (Horizontal, Descending)
output$age_plot <- renderPlotly({
    age_data <- transactions() %>%
      group_by(Age) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales)) %>%
      head(5)

    plot_ly(age_data, y = ~reorder(Age, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'blue'), orientation = 'h') %>%
      layout(title = "Top 5 Best Selling Products by Age",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Age"))
})

# Voucher Usage by Age Group
output$voucher_usage_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Age_Group) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage, x = ~Age_Group, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(158, 202, 225)'),
          text = ~paste("Age Group: ", Age_Group, "<br>Count: ", Count),
          hoverinfo = 'text') %>%  
    layout(title = "Voucher Usage by Age Group",
           xaxis = list(title = "Age Group"),
           yaxis = list(title = "Count"))
})



# UI Product Category (menampilkan grafik 3 produk tertinggi per kategori)
output$product_category_ui <- renderUI({
  categories <- unique(transactions$Product_Category)
  num_categories <- length(categories)
  
  # Bagi kategori menjadi 2 kolom
  split_categories <- split(categories, ceiling(seq_along(categories) / (num_categories / 2)))
  
  fluidRow(
    lapply(1:2, function(i) {
      column(
        width = 6,
        lapply(split_categories[[i]], function(category) {
          box(
            title = paste("Top 3 Products in", category),  
            width = 12, status = "primary", solidHeader = TRUE,
            style = "border-radius: 8px; box-shadow: 2px 2px 6px rgba(0,0,0,0.1);",
            plotlyOutput(paste0("bar_chart_", gsub(" ", "_", category)))
          )
        })
      )
    })
  )
})

# Bar chart untuk 3 produk tertinggi per kategori
lapply(unique(transaction$Product_Category), function(category) {
  output[[paste0("bar_chart_", gsub(" ", "_", category))]] <- renderPlotly({
    top_products <- transactions() %>%
      filter(Product_Category == category) %>%  
      group_by(ProductID, Product_name) %>%
      summarise(Total_Sales = sum(Total_Price, na.rm = TRUE)) %>%
      arrange(desc(Total_Sales)) %>%
      head(3)  
    
    
    # Buat plotly bar chart
    plot_ly(top_products, 
            x = ~Total_Sales, 
            y = ~reorder(Product_name, Total_Sales),  
            type = 'bar',
            orientation = 'v',  
            marker = list(color = 'rgba(55, 128, 191, 0.7)', line = list(color = 'rgba(55, 128, 191, 1.0)', width = 1.5)),
            hoverinfo = 'text',
            text = ~paste0("Rp", format(Total_Sales, big.mark = ",")), 
            hoverlabel = list(bgcolor = "white", font = list(size = 12, color = "black"))) %>%
      layout(
        title = "",  
        xaxis = list(
          title = "Total Sales",
          showgrid = TRUE,
          gridcolor = '#f0f0f0',
          titlefont = list(size = 14, color = "#2C3E50")
        ),
        yaxis = list(
          title = "",
          tickfont = list(size = 12),
          showgrid = FALSE,
          titlefont = list(size = 14, color = "#2C3E50"),
          automargin = TRUE 
        ),
        margin = list(l = 150, r = 50, t = 30, b = 70),
        paper_bgcolor = 'rgba(0,0,0,0)',
        plot_bgcolor = 'rgba(0,0,0,0)',
        showlegend = FALSE
      ) %>%
      config(displayModeBar = FALSE)
  })
})


    
# Galeri Produk seperti Tabel dengan Gambar
output$gallery_product_ui <- renderUI({
  product_data <- products()  
  categories <- unique(product_data$Product_Category)  
  
  # Buat tabel untuk menampilkan produk per kategori
  tagList(
    fluidRow(
      lapply(categories, function(category) {
        column(
          width = 3,  
          h4(category, style = "text-align: center; color: #1E90FF; font-size: 20px; font-weight: bold; margin-bottom: 20px;")
        )
      })
    ),
    
    # Baris Produk
    fluidRow(
      lapply(categories, function(category) {
        category_products <- product_data %>% filter(Product_Category == category)
        column(
          width = 3,  
          lapply(1:nrow(category_products), function(i) {
            box(
              title = category_products$Product_name[i],
              width = 12,  
              status = "primary",
              solidHeader = TRUE,
              fluidRow(
                column(
                  width = 12,  
                  img(src = category_products$Image_Path[i], width = "100%", style = "border-radius: 10px; margin-bottom: 10px;")
                ),
                column(
                  width = 12,  
                  p(category_products$Product_Description[i], style = "font-size: 14px; color: #333; text-align: justify;")
                )
              )
            )
          })
        )
      })
    )
  )
})

# Update Pilihan Voucher di selectizeInput
observe({
  voucher_names <- unique(vouchers()$Voucher_name)
  updateSelectizeInput(session, "voucher_select", choices = voucher_names, selected = NULL)
})

# Voucher Usage by Age Group
output$voucher_usage_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Age_Group) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage, x = ~Age_Group, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(158, 202, 225)'),
          text = ~paste("Age Group: ", Age_Group, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>%  
    layout(title = "Voucher Usage by Age Group",
           xaxis = list(title = "Age Group"),
           yaxis = list(title = "Count"))
})

# Voucher Usage by Gender
output$voucher_usage_gender_plot <- renderPlotly({
  req(input$voucher_select)  
  voucher_usage_gender <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Gender) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage_gender, x = ~Gender, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(26, 118, 255)'),
          text = ~paste("Gender: ", Gender, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>% 
    layout(title = "Voucher Usage by Gender",
           xaxis = list(title = "Gender"),
           yaxis = list(title = "Count"))
})

# Voucher Usage by Category (Pie Chart)
output$voucher_usage_category_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage_category <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Voucher_name) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage_category, labels = ~Voucher_name, values = ~Count, type = 'pie',
          marker = list(colors = c('rgb(55, 83, 109)', 'rgb(26, 118, 255)', 'rgb(158, 202, 225)')),
          textinfo = 'label+percent',  
          hoverinfo = 'label+percent+value',  
          textposition = 'inside') %>%  
    layout(title = "Voucher Usage by Category",
           showlegend = TRUE)
})
  # Tabel Transaksi
  output$out_tbl_transaction <- renderDataTable({
    datatable(transactions(), options = list(pageLength = 5, scrollX = TRUE))
  })
  
  # Tabel Produk
  output$out_tbl_product <- renderDataTable({
    datatable(products(), options = list(pageLength = 5))
  })
  
  # Tabel Voucher
  output$out_tbl_voucher <- renderDataTable({
    datatable(vouchers(), options = list(pageLength = 5))
  })
  
  # Tutup koneksi database saat aplikasi berhenti
  onStop(function() {
    dbDisconnect(con_db)
    message("Koneksi database ditutup.")
  })
}
```

###Memanggil dashboard
```{r}
shinyApp(ui, server)
```
=======
---
author: "Dela Gustiara - M0501240124"
title: "Front End-Back End"
format: html
---
## DELA GUSTIARA-Front END

```{r}
library(DBI)
library(RMySQL)
library(glue)

# Konfigurasi database
db_config <- list(
  host = "127.0.0.1",
  port = 3306,          # Sesuaikan dengan port MySQL kamu
  user = "root",
  password = "",
  dbname = "database_os"    # Nama database yang ingin dipakai
)

# Koneksi awal ke server MySQL (tanpa database)
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password
)

# Cek apakah database sudah ada
db_list <- dbGetQuery(con, "SHOW DATABASES")
db_exists <- db_config$dbname %in% db_list$Database

if (db_exists) {
  message("Database '", db_config$dbname, "' sudah ada.")
} else {
  dbExecute(con, glue("CREATE DATABASE `{db_config$dbname}`"))
  message("Database '", db_config$dbname, "' berhasil dibuat.")
}

# Tutup koneksi awal
dbDisconnect(con)

# Koneksi ulang langsung ke database yang ditentukan
con <- dbConnect(
  MySQL(),
  host = db_config$host,
  port = db_config$port,
  user = db_config$user,
  password = db_config$password,
  dbname = db_config$dbname
)

message("Terhubung ke database '", db_config$dbname, "'.")

# Nanti setelah selesai kerja
# dbDisconnect(con)

```

```{r}
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(ggplot2)
library(dplyr)
library(readr)
library(lubridate)
```


### UI-Dashboard Page

```{r}
# UI
ui <- dashboardPage(
  dashboardHeader(
    title = div(
      style = "display: flex; align-items: center; justify-content: left; height: 100px; padding: 10px; margin-top: -20px;",  # Sesuaikan tinggi header dan tambahkan margin-top negatif
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/Logo.jpg", 
          width = "120px",  # Sesuaikan lebar gambar
          height = "auto",  # Biarkan tinggi gambar menyesuaikan
          style = "border-radius: 5px; object-fit: contain; max-height: 100%; margin-right: 15px;")  # Tambahkan margin untuk jarak
    ),
    titleWidth = 300  # Memperlebar area title agar sesuai dengan gambar
  ),
  # Sidebar
  dashboardSidebar(
    sidebarMenu(
      menuItem("Home", tabName = "home", icon = icon("home")),
      menuItem("Products", icon = icon("boxes"),
               menuSubItem("Product Best Selling", tabName = "product_best_selling", icon = icon("thumbs-up")),
               menuSubItem("Product Category", tabName = "product_category", icon = icon("list")),
               menuSubItem("Gallery Product", tabName = "gallery_product", icon = icon("image"))
      ),
      menuItem("Transactions", tabName = "transactions", icon = icon("shopping-cart")),
      menuItem("Vouchers", tabName = "vouchers", icon = icon("ticket-alt")),
      menuItem("Payment Methods", tabName = "payment_methods", icon = icon("credit-card")),
      menuItem("Our Team", tabName = "our_team", icon = icon("users"))
    )
  ),

  # Body
  dashboardBody(
    tags$head(
      tags$style(HTML("
        /* Customizing dashboard appearance */
        .skin-blue .main-header .logo {
          background-color: #4682B4;
          color: white;
          font-weight: bold;
        }
        .skin-blue .main-header .navbar {
          background-color: #4682B4;
        }
        .skin-blue .main-sidebar {
          background-color: #4682B4;
        }
        .skin-blue .main-sidebar .sidebar-menu > li > a {
          color: white;
        }
        .skin-blue .main-sidebar .sidebar-menu > li:hover > a {
          background-color: #5A9BD5;
        }
        .box, .value-box {
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .box-title {
          font-size: 18px;
          font-weight: bold;
        }
        
        /* Fixed header and sidebar */
        .main-header {
          position: fixed;
          width: 100%;
          top: 0;
          z-index: 1030;
        }
        .main-sidebar {
          position: fixed;
          top: 50px;
          bottom: 0;
          left: 0;
          width: 230px;
          overflow-y: auto;
        }
        .content-wrapper {
          margin-top: 50px;
          margin-left: 230px;
          padding: 20px;
        }
      "))
    ),
    tabItems(
      
      # Tab Home
      tabItem(tabName = "home",
        div(style = "text-align: center;",
            h2("Welcome to Dekirume!", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
            p(strong("Your One-Stop Shop for Everything You Love!"), 
              style = "color: #2C3E50; font-size: 22px; margin-top: 10px; font-family: 'Verdana', sans-serif; font-weight: bold;")
        ),
        fluidRow(
          valueBoxOutput("total_sales", width = 3),
          valueBoxOutput("total_products_sold", width = 3),
          valueBoxOutput("total_customers", width = 3),
          valueBoxOutput("total_discounts", width = 3)
        ),
        box(title = "Annual Sales Report", width = 12, status = "info", solidHeader = TRUE, p("Access the complete annual sales report, featuring detailed insights, charts, and actionable recommendations.")),
        fluidRow(
          box(title = "Monthly Sales", width = 12, status = "primary", solidHeader = TRUE, plotlyOutput("monthly_sales_plot"))
        )
      ),
      
      # Tab Product Recommendation
     tabItem(tabName = "product_best_selling",
  h2("Product Best Selling", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(title = "Best Selling Products by Location", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("location_plot")),
    box(title = "Best Selling Products by Gender", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("gender_plot"))
  ),
  fluidRow(
    box(title = "Top 5 Best Selling Products", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("best_selling_plot")),
    box(title = "Best Selling Products by Age", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("age_plot"))
  )
),
      
      # Tab Product Category
tabItem(tabName = "product_category",
  h2("Product Category", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
  uiOutput("product_category_ui")  
),

# Tab Gallery Produk
tabItem(tabName = "gallery_product",
  h2("Gallery Product", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(
      title = "ANRABESS Women's Summer 2 Piece Outfits",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk1.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("ANRABESS Women's Summer 2 Piece Outfits Sleeveless Tank Crop Button Back Top Capri Wide Leg Pants Linen Set with Pockets.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Dokotoo Tops for Women Trendy Summer Casual",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk2.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Dokotoo Tops for Women Trendy Summer Casual Cap Short Sleeve Basic Textured Solid Color Round Neck T Shirts Blouse.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Rendy Queen Womens Oversized Sweatshirts Turtleneck",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk3.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Rendy Queen Womens Oversized Sweatshirts Turtleneck Pullover Long Sleeve Hoodies Tops Fall Outfits 2023 Clothes.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    )
  ),
  fluidRow(
    box(
      title = "Men's Crewneck Sweatshirts Solid Color Geometric Texture Long Sleeve Casual Pullover Shirt",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk4.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Men's Crewneck Sweatshirts Solid Color Geometric Texture Long Sleeve Casual Pullover Shirt", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Yageyan Men Canvas Low Top Shoes",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk5.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Yageyan Men Canvas Low Top Shoes Classic Casual Sneakers Black and White Fashion Shoes", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "OLANLY Luxury Bathroom Rug Mat 24x16",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk6.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("OLANLY Luxury Bathroom Rug Mat 24x16, Extra Soft and Absorbent Microfiber Bath Rugs, Non-Slip Plush Shaggy Bath Carpet, Machine Wash Dry, Bath Mats for Bathroom Floor, Tub and Shower, Grey.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    )
  ),
  fluidRow(
    box(
      title = "Clorox Toilet Plunger with Hideaway Storage Caddy",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk7.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Clorox Toilet Plunger with Hideaway Storage Caddy, 6.5'' x 6.5'' x 19.5'', White/Gray.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "64HYDRO 32oz 1Liter Motivational Water Bottle",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk13.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("64HYDRO 32oz 1Liter Motivational Water Bottle with Time Marker, Ocean Turtle Beach Summer Vibe Lose My Mind Find My Soul - TTZ2001009Z.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Ocean Bottle 17 oz",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk12.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Ocean Bottle - Recycled Stainless Steel Drinks Reusable Water Bottle - Eco-Friendly & Reusable - Sky Blue - 17 oz.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    )
  ),
  fluidRow(
    box(
      title = "Teal Office Supplies",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk16.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Teal Office Supplies, Teal Office Supplies and Accessories, Mint Green Stapler and Tape Dispenser Set for Women, Green Office Desk Accessories, Office Gift for Women, Office Lady, Coworkers.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Amazon Basics Stapler with 1000 Staples",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk17.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Amazon Basics Stapler with 1000 Staples, Office Stapler, 25 Sheet.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Mr. Pen File Folders 18 Pack",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk18.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Mr. Pen File Folders, 18 Pack, Morandi Colors, 1/3-Cut Tab, Letter Size, Durable Paper Folders, Office Supplies.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    )
  ),
  fluidRow(
    box(
      title = "Gel Pens 12 Pcs Smooth Writing Pens No Bleed & Smear",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk19.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Gel Pens, 12 Pcs Smooth Writing Pens No Bleed & Smear, Black Ink Cute Pens Fine Point (0.5mm), Retractable Aesthetic Journaling Pens School Office Supplies for Women & Men.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Mr. Pen- Sticky Notes 12 Pads",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk20.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Mr. Pen- Sticky Notes, 12 Pads, 3''x3'', Vintage Colors, Sticky Notes 3x3, Sticky Note, Sticky Pads, Sticky Notes Bulk, Stick Notes, Colored Sticky Notes, Sticky Note Pad, Colorful Sticky Notes.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "64 oz Water Bottle",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk11.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("64 oz Water Bottle, 1/2 Gallon Water Bottle, Water Bottle Holder with Shoulder Strap, Time Motivational Water Bottle - Great for Camping, Gym and Outdoor Activities, Gift.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    )
  ),
  fluidRow(
    box(
      title = "Kids Water Bottle with Straw Lid 14oz",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk14.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Kids Water Bottle with Straw Lid 14oz, Vacuum Insulated 316 Stainless Steel Water Bottles for Kids for School, Leakproof Toddler Water Bottle, BPA Free and Keep Cold for 24 Hours.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "KOHLER 4636-RL-0 Cachet ReadyLatch Elongated Toilet Seat",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk8.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("KOHLER 4636-RL-0 Cachet ReadyLatch Elongated Toilet Seat, Quiet-Close Lid and Seat, Countoured Seat, Grip-Tight Bumpers and Installation Hardware, White.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Rubbermaid Commercial 15 Inch Toilet Brush",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk9.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Rubbermaid Commercial 15 Inch Toilet Brush, Toilet Bowl-Cleaner for Bathroom, Scrub Brush for Toilet.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    )
  ),
  fluidRow(
    box(
      title = "Moen YB8099CH Mason Toilet Paper Roller",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk10.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Moen YB8099CH Mason Toilet Paper Roller, Chrome.", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
    ),
    box(
      title = "Bubba Flo Duo Refresh Insulated Water Bottle, 24 oz, TEAL (TEAL)",
      width = 4,
      status = "primary",
      solidHeader = TRUE,
      img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/DBDesigner/Produk/produk15.png", width = "100%", style = "border-radius: 10px; height: 300px; object-fit: cover;"),
      p("Bubba Flo Duo Refresh Insulated Water Bottle, 24 oz, TEAL (TEAL).", 
        style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
        ),
        uiOutput("gallery_product_ui")
      ),
      
      # Tab Transactions
      tabItem(tabName = "transactions",
        h2("Transactions", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        box(title = "Recent Transactions", width = 12, status = "primary", solidHeader = TRUE, dataTableOutput("out_tbl_transaction"))
      ),
      
      # Tab Vouchers
     tabItem(tabName = "vouchers",
  h2("Available Vouchers", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
  fluidRow(
    box(title = "Choose Vouchers", width = 6, status = "primary", solidHeader = TRUE,
        selectizeInput("voucher_select", "Select Voucher(s)", choices = NULL, multiple = TRUE)),
    box(title = "Voucher Usage by Age Group", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_plot"))
  ),
  fluidRow(
    box(title = "Voucher Usage by Gender", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_gender_plot")),
    box(title = "Voucher Usage by Category", width = 6, status = "primary", solidHeader = TRUE, plotlyOutput("voucher_usage_category_plot"))
        )
      ),
      
      # Tab Payment Methods
      tabItem(tabName = "payment_methods",
        h2("Payment Methods", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        fluidRow(
          box(
            title = "ðŸ’³ Credit/Debit Card",
            width = 4,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/bank.png", width = "100%", style = "border-radius: 10px;")),
          box(
            title = "ðŸ“± Digital Wallets",
            width = 4,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/digitalwallet.png", width = "100%", style = "border-radius: 10px;")),
          box(
            title = "ðŸ…¿ PayPal",
            width = 4,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/paypal.png", width = "100%", style = "border-radius: 10px;"))
        )
      ),
      
      # Tab Our Team
      tabItem(tabName = "our_team",
        h2("Meet Our Team", align = "center", style = "color: #2C3E50; font-size: 32px; font-weight: bold;"),
        p("We are a dedicated team passionate about delivering the best solutions.", 
          style = "text-align: center; font-size: 18px; color: #555; margin-bottom: 30px;"),
        
        fluidRow(
          box(
            title = "Dela Gustiara (M0501241024) - Frontend & Backend Developer",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/dela.jpg
", width = "100%", style = "border-radius: 10px;"),
            p("Develops intuitive user interfaces and efficient backend systems for seamless integration.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
          
          box(
            title = "Rupmana Br Butar Butar (M0501241071) - Database Manager",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/rupmana.jpg
", width = "100%", style = "border-radius: 10px;"),
            p("Responsible for managing and optimizing our database systems.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          )
        ),
        
        fluidRow(
          # Rizqi Annafi Muhadi - Copywriter
          box(
            title = "Rizqi Annafi Muhadi (M0501241061) - Copywriter",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/rizqi.jpg
", width = "100%", style = "border-radius: 10px;"),
            p("Creates engaging content to convey brand messages clearly and effectively.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          ),
          
          box(
            title = "Mega Maulina (M0501241047) - Database Designer",
            width = 6,
            status = "primary",
            solidHeader = TRUE,
            img(src = "https://raw.githubusercontent.com/delagustiara24/ProjectMDS/main/Images/mega.jpg
", width = "100%", style = "border-radius: 10px;"),
            p("Designs and optimizes database structures for better performance.", 
              style = "font-size: 14px; color: #333; margin-top: 10px; text-align: justify;")
          )
        )
      )
    )
  )
)
```

### Server-Dashboard Page

```{r}
server <- function(input, output, session) {
  
  # Koneksi ke database
  con_db <- dbConnect(
    MySQL(),
    host = "127.0.0.1",
    port = 3306,
    user = "root",
    password = "",
    dbname = "database_os"
  )
  
  # Cek koneksi database
  if (dbIsValid(con_db)) {
    message("Koneksi database berhasil!")
  } else {
    message("Gagal terhubung ke database. Periksa konfigurasi koneksi.")
  }
  
  # Query Data Transaksi
  transactions <- reactive({
    query <- "
      SELECT t.TransactionID, t.Transaction_Date, t.Price, t.Total_Price, t.Discount_Price, 
             t.Quantity, t.CustomerID, t.ProductID, t.PMID, t.VoucherID, t.Voucher_status, t.Discount,
             c.Gender, c.Locations, c.Age,
             p.Product_name, p.Product_Category,
             v.Voucher_name, v.Discount AS Voucher_Discount,
             pm.Method_name
      FROM data_transaction t
      LEFT JOIN data_customer c ON t.CustomerID = c.CustomerID
      LEFT JOIN data_product p ON t.ProductID = p.ProductID
      LEFT JOIN data_voucher v ON t.VoucherID = v.VoucherID
      LEFT JOIN data_payment_method pm ON t.PMID = pm.PMID
    "
    df <- dbGetQuery(con_db, query)
    
    # Konversi Transaction_Date ke format Date
    df$Transaction_Date <- as.Date(df$Transaction_Date, format = "%Y-%m-%d")
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data transaksi: ", nrow(df))
    
    df
  })
  # Query Data Customer
  customers <- reactive({
    query <- "SELECT * FROM data_customer"
    df <- dbGetQuery(con_db, query)
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data customer: ", nrow(df))
    
    df
  })
  # Query Data Produk
  products <- reactive({
    query <- "SELECT * FROM data_product"
    df <- dbGetQuery(con_db, query)
    
    # Debugging: Cek data yang diambil
    message("Jumlah baris data produk: ", nrow(df))
    
    df
  })
  
  # Query Data Voucher
  vouchers <- reactive({
  query <- "
    SELECT dt.TransactionID, dt.CustomerID, dt.ProductID, dt.VoucherID,
           dt.Voucher_status, dc.Age, dc.Gender, dp.Product_Category, dv.Voucher_name
    FROM data_transaction dt
    LEFT JOIN data_customer dc ON dt.CustomerID = dc.CustomerID
    LEFT JOIN data_product dp ON dt.ProductID = dp.ProductID
    LEFT JOIN data_voucher dv ON dt.VoucherID = dv.VoucherID
    WHERE dt.Voucher_status = 'Used';
  "
  df <- dbGetQuery(con_db, query)
  df <- df %>%
    mutate(Age_Group = cut(Age, breaks = c(0, 18, 30, 50, 100),
                         labels = c("Under 18", "18-30", "31-50", "Over 50"), include.lowest = TRUE))
  # Debugging: Cek data yang diambil
  message("Jumlah baris data voucher: ", nrow(df))
  
  df
})
  
  
  # Total Sales
  output$total_sales <- renderValueBox({
    total_sales <- sum(transactions()$Total_Price, na.rm = TRUE)
    valueBox(value = paste0("Rp", format(total_sales, big.mark = ",")), subtitle = "Total Sales", icon = icon("money-bill-wave"), color = "green")
  })
  
  # Total Products Sold
  output$total_products_sold <- renderValueBox({
    total_products <- sum(transactions()$Quantity, na.rm = TRUE)
    valueBox(value = format(total_products, big.mark = ","), subtitle = "Total Products Sold", icon = icon("shopping-cart"), color = "blue")
  })
  
  # Total Customers
  output$total_customers <- renderValueBox({
    total_customers <- length(unique(customers()$CustomerID))
    valueBox(value = format(total_customers, big.mark = ","), subtitle = "Total Customers", icon = icon("users"), color = "orange")
  })
  
  # Total Discounts
  output$total_discounts <- renderValueBox({
    total_discounts <- sum(transactions()$Discount_Price, na.rm = TRUE)
    valueBox(value = paste0("Rp", format(total_discounts, big.mark = ",")), subtitle = "Total Discounts", icon = icon("tags"), color = "red")
  })
  
  # Monthly Sales Trend
  output$monthly_sales_plot <- renderPlotly({
  sales_data <- transactions() %>%
    mutate(Month = floor_date(Transaction_Date, "month")) %>%
    group_by(Month) %>%
    summarise(Total_Sales = sum(Total_Price), .groups = "drop") %>%
    arrange(Month)

  plot_ly(sales_data, x = ~Month, y = ~Total_Sales, type = 'scatter', mode = 'lines+markers',
          line = list(color = 'rgb(55, 83, 109)', width = 2),
          marker = list(color = 'rgb(26, 118, 255)', size = 6)) %>%
    layout(
      title = list(text = "Monthly Sales", x = 0.5, font = list(size = 16, color = "black")),
      xaxis = list(title = "Month", tickformat = "%Y-%m", showgrid = TRUE, tickangle = -45),
      yaxis = list(title = "Total Sales (Rp)", showgrid = TRUE, zeroline = FALSE),
      hovermode = "x unified",
      margin = list(l = 50, r = 50, t = 50, b = 70)
    )
})
  
 # Best Selling Products by Location (Horizontal, Descending)
output$location_plot <- renderPlotly({
    location_data <- transactions() %>%
      group_by(Locations) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales))  # Urut dari tinggi ke rendah

    plot_ly(location_data, y = ~reorder(Locations, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'green'), orientation = 'h') %>%
      layout(title = "Best Selling Products by Location",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Location"))
})

# Best Selling Products by Gender (Horizontal, Descending)
output$gender_plot <- renderPlotly({
    gender_data <- transactions() %>%
      group_by(Gender) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales))

    plot_ly(gender_data, y = ~reorder(Gender, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'purple'), orientation = 'h') %>%
      layout(title = "Best Selling Products by Gender",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Gender"))
})

# Top 5 Best Selling Products (Horizontal, Descending)
output$best_selling_plot <- renderPlotly({
    best_selling_data <- transactions() %>%
      group_by(ProductID, Product_name) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales)) %>%
      head(5)  

    plot_ly(best_selling_data, y = ~reorder(Product_name, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'orange'), orientation = 'h') %>%
      layout(title = "Top 5 Best Selling Products",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Product"))
})
# Best Selling Products by Age (Horizontal, Descending)
output$age_plot <- renderPlotly({
    age_data <- transactions() %>%
      group_by(Age) %>%
      summarise(Total_Sales = sum(Total_Price)) %>%
      arrange(desc(Total_Sales)) %>%
      head(5)

    plot_ly(age_data, y = ~reorder(Age, Total_Sales), x = ~Total_Sales, 
            type = 'bar', marker = list(color = 'blue'), orientation = 'h') %>%
      layout(title = "Top 5 Best Selling Products by Age",
             xaxis = list(title = "Total Sales (Rp)"),
             yaxis = list(title = "Age"))
})

# Voucher Usage by Age Group
output$voucher_usage_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Age_Group) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage, x = ~Age_Group, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(158, 202, 225)'),
          text = ~paste("Age Group: ", Age_Group, "<br>Count: ", Count),
          hoverinfo = 'text') %>%  
    layout(title = "Voucher Usage by Age Group",
           xaxis = list(title = "Age Group"),
           yaxis = list(title = "Count"))
})


# UI Product Category (menampilkan grafik 3 produk tertinggi per kategori)
output$product_category_ui <- renderUI({
  categories <- unique(product_data$Product_Category)
  num_categories <- length(categories)
  
  # Bagi kategori menjadi 2 kolom
  split_categories <- split(categories, ceiling(seq_along(categories) / (num_categories / 2)))
  
  fluidRow(
    lapply(1:2, function(i) {
      column(
        width = 6,
        lapply(split_categories[[i]], function(category) {
          box(
            title = paste("Top 3 Products in", category),  
            width = 12, status = "primary", solidHeader = TRUE,
            style = "border-radius: 8px; box-shadow: 2px 2px 6px rgba(0,0,0,0.1);",
            plotlyOutput(paste0("bar_chart_", gsub(" ", "_", category)))
          )
        })
      )
    })
  )
})

# Bar chart untuk 3 produk tertinggi per kategori
lapply(unique(product_data$Product_Category), function(category) {
  output[[paste0("bar_chart_", gsub(" ", "_", category))]] <- renderPlotly({
    top_products <- transactions() %>%
      filter(Product_Category == category) %>%  
      group_by(ProductID, Product_name) %>%
      summarise(Total_Sales = sum(Total_Price, na.rm = TRUE)) %>%
      arrange(desc(Total_Sales)) %>%
      head(3)  
    
    
    # Buat plotly bar chart
    plot_ly(top_products, 
            x = ~Total_Sales, 
            y = ~reorder(Product_name, Total_Sales),  
            type = 'bar',
            orientation = 'v',  
            marker = list(color = 'rgba(55, 128, 191, 0.7)', line = list(color = 'rgba(55, 128, 191, 1.0)', width = 1.5)),
            hoverinfo = 'text',
            text = ~paste0("Rp", format(Total_Sales, big.mark = ",")), 
            hoverlabel = list(bgcolor = "white", font = list(size = 12, color = "black"))) %>%
      layout(
        title = "",  
        xaxis = list(
          title = "Total Sales",
          showgrid = TRUE,
          gridcolor = '#f0f0f0',
          titlefont = list(size = 14, color = "#2C3E50")
        ),
        yaxis = list(
          title = "",
          tickfont = list(size = 12),
          showgrid = FALSE,
          titlefont = list(size = 14, color = "#2C3E50"),
          automargin = TRUE 
        ),
        margin = list(l = 150, r = 50, t = 30, b = 70),
        paper_bgcolor = 'rgba(0,0,0,0)',
        plot_bgcolor = 'rgba(0,0,0,0)',
        showlegend = FALSE
      ) %>%
      config(displayModeBar = FALSE)
  })
})


# Update Pilihan Voucher di selectizeInput
observe({
  voucher_names <- unique(vouchers()$Voucher_name)
  updateSelectizeInput(session, "voucher_select", choices = voucher_names, selected = NULL)
})

# Voucher Usage by Age Group
output$voucher_usage_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Age_Group) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage, x = ~Age_Group, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(158, 202, 225)'),
          text = ~paste("Age Group: ", Age_Group, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>%  
    layout(title = "Voucher Usage by Age Group",
           xaxis = list(title = "Age Group"),
           yaxis = list(title = "Count"))
})

# Voucher Usage by Gender
output$voucher_usage_gender_plot <- renderPlotly({
  req(input$voucher_select)  
  voucher_usage_gender <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Gender) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage_gender, x = ~Gender, y = ~Count, type = 'bar',
          marker = list(color = 'rgb(26, 118, 255)'),
          text = ~paste("Gender: ", Gender, "<br>Count: ", Count),  # Tooltip
          hoverinfo = 'text') %>% 
    layout(title = "Voucher Usage by Gender",
           xaxis = list(title = "Gender"),
           yaxis = list(title = "Count"))
})

# Voucher Usage by Category (Pie Chart)
output$voucher_usage_category_plot <- renderPlotly({
  req(input$voucher_select)  # Pastikan voucher dipilih
  voucher_usage_category <- vouchers() %>%
    filter(Voucher_name %in% input$voucher_select) %>%
    group_by(Voucher_name) %>%
    summarise(Count = n())
  
  plot_ly(voucher_usage_category, labels = ~Voucher_name, values = ~Count, type = 'pie',
          marker = list(colors = c('rgb(55, 83, 109)', 'rgb(26, 118, 255)', 'rgb(158, 202, 225)')),
          textinfo = 'label+percent',  
          hoverinfo = 'label+percent+value',  
          textposition = 'inside') %>%  
    layout(title = "Voucher Usage by Category",
           showlegend = TRUE)
})
  # Tabel Transaksi
  output$out_tbl_transaction <- renderDataTable({
    datatable(transactions(), options = list(pageLength = 5, scrollX = TRUE))
  })
  
  # Tabel Produk
  output$out_tbl_product <- renderDataTable({
    datatable(products(), options = list(pageLength = 5))
  })
  
  # Tabel Voucher
  output$out_tbl_voucher <- renderDataTable({
    datatable(vouchers(), options = list(pageLength = 5))
  })
  
  # Tutup koneksi database saat aplikasi berhenti
  onStop(function() {
    dbDisconnect(con_db)
    message("Koneksi database ditutup.")
  })
}
```

###Memanggil dashboard
```{r}
shinyApp(ui, server)
```
